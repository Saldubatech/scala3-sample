@startuml
title
= Job and Task Model
end title

hide empty members



class JobSpec {
  +id: ID
}

class Job {
  +id: ID
}

class Task {
  +id: ID
  +stationId: ID
  +elementId: ID
  +materialRequirements: Iterable<Supply.Requirement<Material, ?>>
  +entryResourceRequirements: Iterable <ResourcePool.Requirement<?>>
  +startResourceRequirements: Iterable <ResourcePool.Requirement<?>>
  +produce(at, materials, entryResources, startResource): OB <: Material
}

class Wip {
  +id: ID
  +arrived: Tick
  +entryResources: Iterable[ResourcePool.Resource<?>
  --
  +started; Tick
  +startResources: Iterable<Supply.Allocation<Material, ?>>
  +materialAllocations: Iterable[Supply.Allocation[Material, ?]]
  --
  +completed: Tick
  +product: P <: Material
  materials: Iterable<Material>
}

Job *-[#blue]-> Task: composed\nof
Job <.. Task: [implementation]

Job -l-> JobSpec: Defined by

Task "0..1" -[#blue]> "1" Wip
Task <.. Wip: [implementation]

@enduml

@startuml

title
= WIP Lifecycle
end title
hide empty description

state New<<AtRest>>
state InProgress<<Processing>>
state Complete
state Failed

[*] -> New

New --> InProgress

InProgress --> Complete

InProgress -> Failed
Complete -> [*]
Failed --> [*]

@enduml

@startuml

title
= Job Lifecycle
end title

state Pending
state InProgress {
  state Inbound
  state Active
  state Outbound
  [*] -> Inbound: Arrive
  Inbound --> Active: Start
  Active --> Outbound: End
  Outbound -> [*] : Depart
}
state Complete

[*] -> Pending : New
Pending --> InProgress: Accept
InProgress <-- InProgress: TaskComplete[Not Last]
InProgress --> Complete: TaskComplete[Last]
Complete -> [*]: Deliver

hide empty description

@enduml
